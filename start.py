from population import Population

def main():
    pop_size = 100
    mutation_rate = 0.01
    max_generation = 100
    
    # Sample input
    # graph = {
    #     0: {2},
    #     1: {2},
    #     2: {4},
    #     3: {0,4},
    #     4: {},
    #     5: {6,7},
    #     6: {},
    #     7: {4,6} 
    # }
    
    AVG_BEST_FITNESSES = []
    BEST_INDIVIDUAL = []
    # Cubyz input
    graph = {0: {1}, 1: {}, 2: {3, 4}, 3: {35, 4}, 4: {2, 3, 247}, 5: {6}, 6: {32, 8, 91, 20, 116, 56, 26, 27, 31}, 7: {8, 9}, 8: {27, 35, 31}, 9: {27, 6, 31}, 10: {8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25}, 11: {32, 27, 31}, 12: {35}, 13: {123, 122, 27}, 14: {46, 31}, 15: {106, 107, 87, 89, 90, 27, 29}, 16: {112, 17, 90, 27}, 17: {16, 90, 27, 29, 31}, 18: {29}, 19: {29}, 20: {32, 4, 165, 42, 90, 27, 31}, 21: {20, 31}, 22: {27, 116, 31}, 23: {65, 193, 8, 246, 27, 188}, 24: {32, 228, 8, 10, 27, 253, 31}, 25: {29, 27, 253}, 26: {8, 10, 11, 12, 14, 17, 20, 21, 23, 25, 27, 28, 29, 30}, 27: {31}, 28: {8, 10, 11, 12, 14, 20, 21, 27, 31, 32, 33, 35, 46, 179, 180, 182, 183, 184, 185, 57, 186, 65, 88, 107, 115, 117}, 29: {257, 2, 5, 261, 262, 8, 6, 10, 263, 12, 264, 14, 265, 17, 18, 19, 20, 25, 26, 27, 35, 46, 49, 50, 52, 184, 185, 65, 67, 68, 83, 212, 213, 84, 88, 90, 91, 227, 228, 230, 254}, 30: {32, 35, 268, 269, 270, 178, 243, 183, 56}, 31: {}, 32: {183, 56, 249, 250, 251, 252}, 33: {34}, 34: {}, 35: {}, 36: {1}, 37: {32, 35, 38, 39, 40, 41, 42, 11, 43, 44, 45, 46, 31}, 38: {35, 39, 8, 40, 41, 42, 43, 44, 47, 17, 49, 51, 61, 59, 92, 93, 94, 31}, 39: {42}, 40: {39, 42, 44, 80, 86}, 41: {38, 8, 105, 44, 27, 31}, 42: {35, 52, 229}, 43: {88, 35}, 44: {106, 107, 45, 27, 31}, 45: {}, 46: {32, 35, 5, 6, 8, 10, 11, 15, 114, 51, 184, 185, 27, 29, 31}, 47: {48, 49, 50}, 48: {37, 38, 103, 104, 105, 107, 108, 109, 110, 47, 45, 49, 50, 111, 59, 63}, 49: {50, 83}, 50: {89, 258, 259, 260, 228, 230, 45, 46, 15, 178, 114, 86, 184, 25, 29, 253}, 51: {17, 5}, 52: {32, 2, 35, 3, 53, 54, 55, 56, 57, 58}, 53: {137, 138}, 54: {137, 35, 79}, 55: {67, 132, 35, 68, 133, 240, 241, 59, 29}, 56: {183}, 57: {32, 35, 183, 56, 249, 250, 251, 252}, 58: {81, 3, 35}, 59: {64, 65, 61, 60, 29, 62, 63}, 60: {6, 91, 46, 15, 16, 17, 50, 83, 86, 87, 88, 89, 90, 59, 29}, 61: {6, 103, 59, 46, 50, 83, 20, 114, 115, 53, 116, 89, 90, 91, 60, 29, 62}, 62: {134, 135, 136, 9, 137, 138, 139, 52, 54}, 63: {}, 64: {226, 227, 228, 47, 48, 50, 59, 29}, 65: {32, 193, 288, 287, 86, 23, 246, 183, 56, 27, 188, 24, 31}, 66: {67, 35, 68, 69, 70, 54, 59, 61}, 67: {66, 35, 68, 69, 70, 54}, 68: {0, 1, 5, 6, 7, 8, 9, 23, 26, 27, 29, 35, 37, 38, 39, 40, 42, 51, 52, 54, 55, 59, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84}, 69: {5, 134, 6, 8, 9, 10, 136, 137, 138, 17, 27, 156, 29, 158, 159, 31, 163, 166, 50, 51, 52, 53, 54, 59, 60, 61, 62, 83, 90, 103}, 70: {137, 139, 29, 31, 35, 37, 38, 166, 39, 40, 42, 43, 46, 47, 48, 49, 50, 52, 54, 59, 60, 61, 62, 63, 64, 66, 67, 68, 80, 209, 210, 211, 83, 214, 215, 86, 89, 95, 224, 225, 102, 103, 104, 105}, 71: {68, 85}, 72: {0, 1, 35, 10, 76, 77, 46, 52, 117, 118, 119, 59, 28}, 73: {65, 35, 74, 140, 141, 81, 59}, 74: {140, 141, 142}, 75: {6, 9, 42, 139, 59, 144, 146, 147, 52, 150, 151, 54, 62, 91, 61, 158}, 76: {160, 168, 9, 169, 139, 42, 144, 145, 81, 52, 54, 152, 59, 62}, 77: {33, 34, 35, 36, 1, 8, 10, 179, 180, 117, 23, 26}, 78: {35, 37, 38, 39, 40, 104, 42, 43, 105, 45, 46, 79, 80, 209, 54}, 79: {218, 42}, 80: {40, 83}, 81: {120, 82, 31}, 82: {}, 83: {32, 90, 6, 122, 8, 10, 91, 46, 271, 17, 114, 20, 116, 56, 89, 26, 27, 29}, 84: {228, 293, 292, 295, 8, 265, 296, 297, 298, 14, 25, 27, 29, 253, 31}, 85: {}, 86: {}, 87: {}, 88: {}, 89: {50, 29}, 90: {32, 6, 46, 15, 271, 17, 116, 56, 29, 31}, 91: {115, 20}, 92: {32, 81, 242, 178, 120, 57, 93, 31}, 93: {242, 92}, 94: {}, 95: {15, 38, 46, 47, 48, 49, 50, 54, 59, 63, 86, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107}, 96: {106, 95}, 97: {106, 95}, 98: {107, 95}, 99: {107, 95}, 100: {107, 95}, 101: {106, 95}, 102: {95}, 103: {}, 104: {35}, 105: {}, 106: {}, 107: {}, 108: {48, 107}, 109: {48, 107}, 110: {48, 107}, 111: {261, 45, 49, 50, 29}, 112: {16, 17}, 113: {112, 17, 90}, 114: {46}, 115: {4, 20, 46, 31}, 116: {32, 165, 8, 46, 114, 274, 20, 276, 277, 183, 56, 26, 27, 31}, 117: {}, 118: {67, 68, 35, 8, 72, 10, 40, 76, 41, 44, 46, 59, 81, 17, 51, 120, 27, 31}, 119: {128, 129, 130, 131, 8, 10, 17, 22, 23, 25, 26, 27, 46, 179, 180, 187, 188, 189, 190, 191, 192, 65, 193, 194, 195, 196, 197, 84, 117, 121, 127}, 120: {}, 121: {6, 13, 83, 122, 91, 31}, 122: {29}, 123: {}, 124: {125, 13, 122, 31}, 125: {122, 124, 13, 31}, 126: {8, 10, 13, 122, 27}, 127: {122, 83, 13, 31}, 128: {122, 29, 13, 31}, 129: {6, 122, 8, 13, 83, 20, 26, 27, 29, 31}, 130: {122, 83, 13, 31}, 131: {122, 29, 13, 31}, 132: {133}, 133: {132}, 134: {136, 135}, 135: {134}, 136: {134}, 137: {35, 167}, 138: {54}, 139: {104, 105, 42, 146, 54, 151, 219, 220, 221, 222}, 140: {105}, 141: {}, 142: {}, 143: {35, 4, 138, 139, 144, 145, 146, 147}, 144: {54}, 145: {4, 144, 146, 147, 151}, 146: {42, 35}, 147: {81, 146}, 148: {35, 4, 138, 139, 144, 145, 52}, 149: {144}, 150: {67, 68, 4, 138, 139, 42, 79, 144, 145, 146, 147, 20, 115, 52, 151, 116, 91}, 151: {167, 104, 137, 42, 139, 233, 235, 238, 234, 237, 239, 146, 236, 105, 54}, 152: {144, 139}, 153: {144, 138, 139, 149}, 154: {138, 139, 144, 146, 147, 52}, 155: {137, 138, 139, 144, 146, 147, 151}, 156: {8, 9, 10, 137, 138, 13, 144, 146, 147, 151, 155, 27, 157, 35, 52, 59, 61, 122, 126}, 157: {156, 13}, 158: {6, 9, 138, 139, 91, 144, 145, 29, 52, 20, 150, 54, 59, 61, 31}, 159: {134, 136, 9, 137, 138, 143, 144, 29, 160, 161, 35, 52, 53, 59, 62, 67, 68, 69, 70}, 160: {4, 9, 138, 139, 143, 144, 145, 161, 35, 170, 42, 52, 54, 55, 59, 62, 66, 67, 81}, 161: {2, 3, 4, 9, 143, 144, 176, 177, 81, 52, 175, 55, 58, 59, 62}, 162: {6, 8, 59, 91, 144, 29, 52, 20, 150, 54, 26, 27, 61, 158, 31}, 163: {6, 10, 91, 12, 144, 29, 52, 20, 150, 54, 21, 59, 61, 158, 31}, 164: {165, 6, 91, 144, 52, 20, 150, 54, 116, 59, 61, 158, 31}, 165: {32, 183}, 166: {67, 35, 70, 103, 104, 105, 42, 79, 208, 209, 48, 52, 54, 59, 29, 62}, 167: {}, 168: {0, 65, 67, 68, 69, 9, 139, 146, 147, 83, 50, 52, 54, 61, 59, 29, 31}, 169: {132, 133, 9, 139, 146, 147, 52, 54}, 170: {67, 68, 4, 9, 171, 172, 173, 174, 143, 144, 175, 52, 59, 29, 62}, 171: {4, 8, 9, 10, 143, 144, 146, 147, 25, 155, 27, 29, 31, 172, 52, 59, 62, 67, 68}, 172: {228, 230, 45, 46, 178, 50, 52, 89, 29}, 173: {170, 35, 174, 143}, 174: {170, 35, 173}, 175: {4}, 176: {4, 9, 143, 144, 145, 52, 148, 54, 154, 59, 62}, 177: {4, 9, 137, 138, 143, 144, 145, 178, 52, 53, 54, 153, 59, 62}, 178: {35}, 179: {}, 180: {}, 181: {81, 178, 82, 182, 28}, 182: {28}, 183: {56, 249, 250, 251}, 184: {29}, 185: {20}, 186: {32, 90, 20, 31}, 187: {}, 188: {88, 246}, 189: {8, 10, 91, 271, 16, 17, 273, 20, 90, 27, 29, 31}, 190: {17, 83, 90, 29, 31}, 191: {116, 22}, 192: {116, 22}, 193: {65}, 194: {32, 228, 46, 15, 24, 253, 31}, 195: {32, 290, 291, 228, 46, 24, 253, 31}, 196: {32, 228, 46, 24, 253, 31}, 197: {46, 25, 29, 253, 31}, 198: {162, 164, 37, 199, 8, 200, 10, 7, 201, 202, 203, 204, 205, 15, 16, 187, 27}, 199: {231, 40, 232, 104, 112, 209, 16, 17, 83, 215, 90, 59, 61, 31}, 200: {38, 8, 41, 106, 107, 44, 45, 27, 31}, 201: {37, 40, 106, 107, 44, 45, 46, 15, 50, 87, 89, 90, 29, 31}, 202: {37, 40, 106, 107, 44, 46, 15, 50, 87, 89, 90, 29, 31}, 203: {37, 40, 106, 107, 44, 46, 15, 50, 87, 89, 90, 29}, 204: {35, 37, 200, 40, 106, 107, 44, 45, 46, 15, 50, 87, 89, 90, 29, 31}, 205: {37, 40, 106, 107, 44, 46, 15, 50, 87, 89, 90, 29, 31}, 206: {184, 29, 207}, 207: {}, 208: {166}, 209: {80}, 210: {20, 29, 37, 38, 39, 40, 42, 43, 45, 46, 50, 52, 54, 59, 63, 209, 211, 212, 213, 91, 103, 104, 105, 115}, 211: {}, 212: {228, 230, 50, 213, 29}, 213: {258, 35, 6, 91, 46, 15, 272, 50, 212, 20, 90, 27, 29}, 214: {54}, 215: {16, 17, 29, 38, 39, 40, 52, 54, 59, 61, 63, 209, 211, 216, 217, 103, 104, 105, 112, 113}, 216: {217}, 217: {216}, 218: {79}, 219: {139}, 220: {139}, 221: {139}, 222: {139}, 223: {40, 44, 80, 209, 86}, 224: {70}, 225: {70}, 226: {64, 228, 38, 47, 48, 49, 50, 59, 29, 95}, 227: {}, 228: {65, 193, 285, 230, 263, 264, 284, 246, 23, 280, 26, 283, 188, 29, 286}, 229: {35, 243}, 230: {258, 35, 259, 260, 228, 263, 272, 50, 213, 278, 29}, 231: {199, 40, 39, 42, 44, 17, 31}, 232: {199}, 233: {234}, 234: {233, 235, 236, 146, 151}, 235: {233, 139, 236, 146, 151}, 236: {233}, 237: {146, 238, 151}, 238: {}, 239: {151}, 240: {132, 133, 55}, 241: {132, 133, 55}, 242: {92}, 243: {}, 244: {107, 245}, 245: {}, 246: {}, 247: {248}, 248: {247}, 249: {56}, 250: {56}, 251: {56}, 252: {56}, 253: {49, 25}, 254: {256, 35, 111, 49, 50, 83, 25, 29, 255}, 255: {}, 256: {35, 49, 83, 29, 254, 255}, 257: {35, 228, 230, 46, 207, 49, 50, 114, 212, 213, 184, 29}, 258: {}, 259: {258, 260, 278}, 260: {32, 46, 31}, 261: {46, 50, 25, 59, 29, 253}, 262: {}, 263: {32, 35, 260, 90, 8, 272, 20, 183, 56, 57, 26, 279, 29, 25, 31}, 264: {228}, 265: {228, 293, 294, 46, 114, 253, 29, 31}, 266: {32, 35, 5, 6, 8, 10, 267, 15, 51, 20, 115, 184, 185, 27, 29, 31}, 267: {266}, 268: {30}, 269: {30, 270}, 270: {35, 30}, 271: {90}, 272: {32, 35, 8, 27, 31}, 273: {90, 189, 271}, 274: {275, 116, 20, 165}, 275: {274, 20}, 276: {114, 116, 46}, 277: {274, 116, 20, 165}, 278: {}, 279: {32, 35, 90, 8, 17, 26, 27, 29}, 280: {65, 193, 228, 262, 281, 282}, 281: {280, 282}, 282: {65, 283, 228, 193}, 283: {}, 284: {228, 286}, 285: {65, 228}, 286: {88, 35}, 287: {65, 193}, 288: {289, 46, 15, 253, 31}, 289: {288}, 290: {291, 195}, 291: {195}, 292: {228, 293, 46, 50, 29, 253, 31}, 293: {29, 27, 228, 253}, 294: {265}, 295: {228, 293, 46, 14, 50, 253, 29, 31}, 296: {65, 228, 293, 85, 24, 253, 29, 31}, 297: {288, 65, 193, 228, 293, 46, 253, 29, 31}, 298: {84, 293}}

    pop = Population(graph, pop_size, mutation_rate, max_generation, AVG_BEST_FITNESSES)

    pop.print_population_status()

    while not pop.finished:
        pop.natural_selection()
        pop.generate_new_population()
        pop.evaluate()
        BEST_INDIVIDUAL = pop.print_population_status()

    # Output results
    f = open("results.txt", "w")
    f.write("=== Setting ===\n")
    f.write("pop_size: " + str(pop_size) + "\n")
    f.write("mutation_rate: " + str(mutation_rate) + "\n")
    f.write("max_generation: " + str(max_generation) + "\n\n\n")  
    f.write("Average fitness, Best fitness\n")
    for r in AVG_BEST_FITNESSES:
        f.write(str(r[0]) + "," + str(r[1]) + "\n")
    
    f.write("\n\nBest individual:\n")
    for ele in BEST_INDIVIDUAL:
        f.write(str(ele) + ", ")
    
    f.close()
    
if __name__ == "__main__":
    main()
